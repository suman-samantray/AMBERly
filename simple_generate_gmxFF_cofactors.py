#!/usr/bin/env python3

import os
import sys
import subprocess
from parmed.amber import AmberParm

def require_file(path):
    if not os.path.isfile(path):
        sys.stderr.write(f"ERROR: Required file not found: {path}\n")
        sys.exit(1)

def main():
    # Prompt user for all required paths
    mol2      = input("Path to MOL2 file (e.g. lib/HEM/3ARC_HEM.mol2): ").strip()
    frcmod    = input("Path to FRCMOD file (e.g. lib/HEM/3ARC_HEM.frcmod): ").strip()
    prefix    = input("Output prefix (e.g. 3ARC_HEM): ").strip()
    leap_prot = input("Path to leaprc.protein.ff14SB (e.g. /Users/sama578/opt/anaconda3/envs/py/dat/leap/cmd/leaprc.protein.ff14SB): ").strip()
    leap_gaff = input("Path to leaprc.gaff (e.g. /Users/sama578/opt/anaconda3/envs/py/dat/leap/cmd/leaprc.gaff): ").strip()

    # 1) Verify inputs
    for p in (mol2, frcmod, leap_prot, leap_gaff):
        require_file(p)

    # Change into directory of MOL2/FRCMOD so outputs go there
    workdir = os.path.dirname(os.path.abspath(mol2)) or "."
    os.chdir(workdir)
    mol2_fn   = os.path.basename(mol2)
    frcmod_fn = os.path.basename(frcmod)

    print(f"\nParameterizing {mol2_fn} + {frcmod_fn} â†’ prefix '{prefix}' in {workdir}\n")

    # 2) Write leap.in
    leap_in = f"""
source {leap_prot}
source {leap_gaff}
LIG = loadMol2 {mol2_fn}
loadAmberParams {frcmod_fn}
saveAmberParm LIG {prefix}.prmtop {prefix}.rst7
quit
"""
    with open("leap.in","w") as f:
        f.write(leap_in)

    # 3) Run tleap
    res = subprocess.run(["tleap","-f","leap.in"], capture_output=True, text=True)
    if res.returncode:
        print(res.stdout, res.stderr, file=sys.stderr)
        sys.exit("--> tleap failed")
    print(f"--> tleap generated {prefix}.prmtop & {prefix}.rst7")

    # 4) Load prmtop/rst7 via AmberParm
    parm = AmberParm(f"{prefix}.prmtop", f"{prefix}.rst7")
    print(f"Loaded AmberParm: {len(parm.atoms)} atoms, {len(parm.bond_types)} bonds")

    # 5) Write .gro and .itp
    parm.save(f"{prefix}.gro", format="gro")
    parm.save(f"{prefix}.itp", format="gromacs")
    print(f"--> Built {prefix}.gro & {prefix}.itp")

    # 6) Write master topol.top
    with open("topol.top","w") as f:
        f.write(f""";;
;; Generated by python script
;;
;; Correspondance:
;; sumansamantray06@gmail.com
;;
;; The main GROMACS topology file for {prefix} ligand
;;

; Include forcefield parameters
#include "toppar/forcefield.itp"
#include "{os.path.basename(leap_prot)}"
#include "{os.path.basename(leap_gaff)}"
#include "{prefix}.itp"

[ system ]
; Name
{prefix} ligand in vacuum

[ molecules ]
; Compound    #mols
{prefix}      1
""")
    print("--> Generated topol.top file")

    # 7) Extract [ defaults ] + [ atomtypes ] to sample_forcefield.itp
    srcfile = f"{prefix}.itp"
    dstfile = f"{prefix}_forcefield.itp"
    with open(srcfile) as src, open(dstfile,"w") as dst:
        in_block = False
        for line in src:
            stripped = line.strip()
            if stripped.startswith("[ defaults ]") or stripped.startswith("[ atomtypes ]"):
                in_block = True
            elif in_block and stripped.startswith("[") and not stripped.startswith("[ atomtypes ]"):
                break
            if in_block:
                dst.write(line)
    print(f"--> Generated {dstfile} file")

    # 8) Strip [ defaults ] & [ atomtypes ] from the .itp in-place
    keep = {
        "[ moleculetype ]",
        "[ atoms ]",
        "[ bonds ]",
        "[ pairs ]",
        "[ angles ]",
        "[ dihedrals ]",
    }
    lines, write = [], False
    with open(srcfile) as src:
        for line in src:
            stripped = line.strip()
            if any(stripped.startswith(h) for h in keep):
                write = True
            elif write and stripped.startswith("[") and stripped not in keep:
                write = False
            if write:
                lines.append(line)
    with open(srcfile,"w") as dst:
        dst.writelines(lines)
    print(f"--> Generated {srcfile} file")

if __name__=="__main__":
    main()
